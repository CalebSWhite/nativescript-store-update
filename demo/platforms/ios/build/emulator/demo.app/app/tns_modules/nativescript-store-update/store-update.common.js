"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var app = require("tns-core-modules/application");
var dialogs = require("tns-core-modules/ui/dialogs");
var Common = (function (_super) {
    __extends(Common, _super);
    function Common() {
        var _this = _super.call(this) || this;
        _this.message = Utils.SUCCESS_MSG();
        return _this;
    }
    Common.prototype.greet = function () {
        return "Hello, NS";
    };
    Common.versionCompareNumerically = function (str1, str2) {
        return 0;
    };
    return Common;
}(observable_1.Observable));
exports.Common = Common;
var Utils = (function () {
    function Utils() {
    }
    Utils.SUCCESS_MSG = function () {
        var msg = "Your plugin is working on " + (app.android ? 'Android' : 'iOS') + ".";
        setTimeout(function () {
            dialogs.alert(msg + " For real. It's really working :)").then(function () { return console.log("Dialog closed."); });
        }, 2000);
        return msg;
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdXBkYXRlLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0b3JlLXVwZGF0ZS5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBOEQ7QUFDOUQsa0RBQW9EO0FBQ3BELHFEQUF1RDtBQUV2RDtJQUE0QiwwQkFBVTtJQUdwQztRQUFBLFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDOztJQUVyQyxDQUFDO0lBRU0sc0JBQUssR0FBWjtRQUNFLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQWlCYSxnQ0FBeUIsR0FBdkMsVUFBd0MsSUFBWSxFQUFFLElBQVk7UUF5QjlELE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDWixDQUFDO0lBRUgsYUFBQztBQUFELENBQUMsQUF4REQsQ0FBNEIsdUJBQVUsR0F3RHJDO0FBeERZLHdCQUFNO0FBMERuQjtJQUFBO0lBVUEsQ0FBQztJQVRlLGlCQUFXLEdBQXpCO1FBQ0UsSUFBSSxHQUFHLEdBQUcsZ0NBQTZCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsU0FBUyxHQUFHLEtBQUssT0FBRyxDQUFDO1FBRTFFLFVBQVUsQ0FBQztZQUNULE9BQU8sQ0FBQyxLQUFLLENBQUksR0FBRyxzQ0FBbUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUE3QixDQUE2QixDQUFDLENBQUM7UUFDckcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRVQsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDSCxZQUFDO0FBQUQsQ0FBQyxBQVZELElBVUM7QUFWWSxzQkFBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbic7XG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZGlhbG9ncyc7XG5cbmV4cG9ydCBjbGFzcyBDb21tb24gZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgcHVibGljIG1lc3NhZ2U6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWVzc2FnZSA9IFV0aWxzLlNVQ0NFU1NfTVNHKCk7XG5cbiAgfVxuXG4gIHB1YmxpYyBncmVldCgpIHtcbiAgICByZXR1cm4gXCJIZWxsbywgTlNcIjtcbiAgfVxuXG4gIC8qKlxuICAgICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY3MDE5NDgvZWZmaWNpZW50LXdheS10by1jb21wYXJlLXZlcnNpb24tc3RyaW5ncy1pbi1qYXZhXG4gICAgICogPHAvPlxuICAgICAqIENvbXBhcmVzIHR3byB2ZXJzaW9uIHN0cmluZ3MuXG4gICAgICogPHAvPlxuICAgICAqIFVzZSB0aGlzIGluc3RlYWQgb2YgU3RyaW5nLmNvbXBhcmVUbygpIGZvciBhIG5vbi1sZXhpY29ncmFwaGljYWxcbiAgICAgKiBjb21wYXJpc29uIHRoYXQgd29ya3MgZm9yIHZlcnNpb24gc3RyaW5ncy4gZS5nLiBcIjEuMTBcIi5jb21wYXJlVG8oXCIxLjZcIikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyMSBhIHN0cmluZyBvZiBvcmRpbmFsIG51bWJlcnMgc2VwYXJhdGVkIGJ5IGRlY2ltYWwgcG9pbnRzLlxuICAgICAqIEBwYXJhbSBzdHIyIGEgc3RyaW5nIG9mIG9yZGluYWwgbnVtYmVycyBzZXBhcmF0ZWQgYnkgZGVjaW1hbCBwb2ludHMuXG4gICAgICogQHJldHVybiBUaGUgcmVzdWx0IGlzIGEgbmVnYXRpdmUgaW50ZWdlciBpZiBzdHIxIGlzIF9udW1lcmljYWxseV8gbGVzcyB0aGFuIHN0cjIuXG4gICAgICogVGhlIHJlc3VsdCBpcyBhIHBvc2l0aXZlIGludGVnZXIgaWYgc3RyMSBpcyBfbnVtZXJpY2FsbHlfIGdyZWF0ZXIgdGhhbiBzdHIyLlxuICAgICAqIFRoZSByZXN1bHQgaXMgemVybyBpZiB0aGUgc3RyaW5ncyBhcmUgX251bWVyaWNhbGx5XyBlcXVhbC5cbiAgICAgKiBAbm90ZSBJdCBkb2VzIG5vdCB3b3JrIGlmIFwiMS4xMFwiIGlzIHN1cHBvc2VkIHRvIGJlIGVxdWFsIHRvIFwiMS4xMC4wXCIuXG4gICAgICovXG4gIHB1YmxpYyBzdGF0aWMgdmVyc2lvbkNvbXBhcmVOdW1lcmljYWxseShzdHIxOiBzdHJpbmcsIHN0cjI6IHN0cmluZyk6IG51bWJlciB7XG4gICAgIC8qKlxuICAgICAgLy8gU3RyaW5nW10gdmFsczEgPSBzdHIxLnNwbGl0KFwiXFxcXC5cIik7XG4gICAgICAvLyBTdHJpbmdbXSB2YWxzMiA9IHN0cjIuc3BsaXQoXCJcXFxcLlwiKTtcbiAgICAgIC8vIGludCBpID0gMDtcbiAgICAgIC8vIC8vIHNldCBpbmRleCB0byBmaXJzdCBub24tZXF1YWwgb3JkaW5hbCBvciBsZW5ndGggb2Ygc2hvcnRlc3QgdmVyc2lvbiBzdHJpbmdcbiAgICAgIC8vIHdoaWxlIChpIDwgdmFsczEubGVuZ3RoICYmIGkgPCB2YWxzMi5sZW5ndGggJiYgdmFsczFbaV0uZXF1YWxzKHZhbHMyW2ldKSkge1xuICAgICAgLy8gICAgIGkrKztcbiAgICAgIC8vIH1cbiAgICAgIC8vIHRyeSB7XG4gICAgICAvLyAgICAgLy8gY29tcGFyZSBmaXJzdCBub24tZXF1YWwgb3JkaW5hbCBudW1iZXJcbiAgICAgIC8vICAgICBpZiAoaSA8IHZhbHMxLmxlbmd0aCAmJiBpIDwgdmFsczIubGVuZ3RoKSB7XG4gICAgICAvLyAgICAgICAgIGludCBkaWZmID0gSW50ZWdlci52YWx1ZU9mKHZhbHMxW2ldKS5jb21wYXJlVG8oSW50ZWdlci52YWx1ZU9mKHZhbHMyW2ldKSk7XG4gICAgICAvLyAgICAgICAgIHJldHVybiBJbnRlZ2VyLnNpZ251bShkaWZmKTtcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgICAgLy8gdGhlIHN0cmluZ3MgYXJlIGVxdWFsIG9yIG9uZSBzdHJpbmcgaXMgYSBzdWJzdHJpbmcgb2YgdGhlIG90aGVyXG4gICAgICAvLyAgICAgLy8gZS5nLiBcIjEuMi4zXCIgPSBcIjEuMi4zXCIgb3IgXCIxLjIuM1wiIDwgXCIxLjIuMy40XCJcbiAgICAgIC8vICAgICBlbHNlIHtcbiAgICAgIC8vICAgICAgICAgcmV0dXJuIEludGVnZXIuc2lnbnVtKHZhbHMxLmxlbmd0aCAtIHZhbHMyLmxlbmd0aCk7XG4gICAgICAvLyAgICAgfVxuICAgICAgLy8gfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHtcbiAgICAgIC8vICAgICAvLyBQb3NzaWJseSB0aGVyZSBhcmUgZGlmZmVyZW50IHZlcnNpb25zIG9mIHRoZSBhcHAgaW4gdGhlIHN0b3JlLCBzbyB3ZSBjYW4ndCBjaGVjay5cbiAgICAgIC8vICAgICByZXR1cm4gMDtcbiAgICAgIC8vIH1cbiAgICAgICovXG4gICAgICByZXR1cm4gMFxuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcbiAgcHVibGljIHN0YXRpYyBTVUNDRVNTX01TRygpOiBzdHJpbmcge1xuICAgIGxldCBtc2cgPSBgWW91ciBwbHVnaW4gaXMgd29ya2luZyBvbiAke2FwcC5hbmRyb2lkID8gJ0FuZHJvaWQnIDogJ2lPUyd9LmA7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGRpYWxvZ3MuYWxlcnQoYCR7bXNnfSBGb3IgcmVhbC4gSXQncyByZWFsbHkgd29ya2luZyA6KWApLnRoZW4oKCkgPT4gY29uc29sZS5sb2coYERpYWxvZyBjbG9zZWQuYCkpO1xuICAgIH0sIDIwMDApO1xuXG4gICAgcmV0dXJuIG1zZztcbiAgfVxufVxuIl19